#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build Unraid Kernel

on:
  repository_dispatch:
  workflow_dispatch:


env:
  REPO_URL: https://github.com/thor2002ro/unraid_kernel
  REPO_BRANCH: 6.2-rc4-20230119
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    container: 'ghcr.io/aclemons/slackware:latest-full@sha256:c113e4e2b301017d70a72d014af92fe74cad41ca73a02478701b9fd0f66500d9'

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo cp /usr/share/zoneinfo/"$TZ" /etc/localtime
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH unraid
        ln -sf /workdir/unraid $GITHUB_WORKSPACE/unraid

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files unraid/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE unraid/.config
        chmod +x $DIY_P1_SH
        cd unraid
        $GITHUB_WORKSPACE/$DIY_P1_SH


    - name: Compile the kernel & modules
      id: compile
      run: |
        cd unraid
        echo -e "$(nproc) thread compile"
        make oldconfig && make prepare
        make LOCALVERSION= kernelrelease
        make -j$(nproc) || make -j12
        make modules_prepare
        make bzImage
        make modules
        make modules_install
        #out of tree modules
        chmod +x $GITHUB_WORKSPACE/$DIY_P2_SH
        $GITHUB_WORKSPACE/$DIY_P2_SH

        echo "::set-output name=status::success"
        echo "KERNELRELEASE=$(make LOCALVERSION= kernelrelease)" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd unraid
        cp arch/x86/boot/bzImage ~/bzimage
        cd ~
        mksquashfs /lib/modules/${KERNELRELEASE}+/ bzmodules -keep-as-directory -noappend
        sha256sum bzmodules > bzmodules.sha256
        #sha256sum bzfirmware > bzfirmware.sha256
        sha256sum bzimage > bzimage.sha256
        #tar files
        tar -cvf bzfiles.tar ~
        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: bzfiles.tar
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
